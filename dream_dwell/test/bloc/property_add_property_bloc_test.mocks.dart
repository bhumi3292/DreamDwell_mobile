// Mocks generated by Mockito 5.4.5 from annotations
// in dream_dwell/test/bloc/property_add_property_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dream_dwell/cores/error/failure.dart' as _i7;
import 'package:dream_dwell/features/add_property/domain/entity/category/category_entity.dart'
    as _i9;
import 'package:dream_dwell/features/add_property/domain/repository/category_repository.dart'
    as _i4;
import 'package:dream_dwell/features/add_property/domain/repository/property_repository.dart'
    as _i2;
import 'package:dream_dwell/features/add_property/domain/use_case/category/get_all_categories_usecase.dart'
    as _i8;
import 'package:dream_dwell/features/add_property/domain/use_case/property/add_property_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIPropertyRepository_0 extends _i1.SmartFake
    implements _i2.IPropertyRepository {
  _FakeIPropertyRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeICategoryRepository_2 extends _i1.SmartFake
    implements _i4.ICategoryRepository {
  _FakeICategoryRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddPropertyUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPropertyUsecase extends _i1.Mock
    implements _i5.AddPropertyUsecase {
  MockAddPropertyUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IPropertyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIPropertyRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IPropertyRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(
          _i5.AddPropertyParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);
}

/// A class which mocks [GetAllCategoriesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCategoriesUsecase extends _i1.Mock
    implements _i8.GetAllCategoriesUsecase {
  MockGetAllCategoriesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ICategoryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeICategoryRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ICategoryRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i9.CategoryEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i9.CategoryEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i9.CategoryEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i9.CategoryEntity>>>);
}
